//Sensoren für Messung von Luftqualität
//MHZ19C
//MQ131
//DHT44
// TFT 1,8 Display ST7735

// von hier MHZ19C* define
//Source: https://wolles-elektronikkiste.de/mh-z14-und-mh-z19-co2-sensoren

#define RANGE_2000  0x07D0
#define RANGE_5000  0x1388
#define RANGE_10000 0x2710
#define TEMP_CORR 38  // seems to differ from module to module!
//bis hier MHZ19C* 

//von hier MQ131*
//https://github.com/ostaquet/Arduino-MQ131-driver
#include <MQ131.h>
//bis hier MQ131*

//von hier DHT44*
//URL: https://github.com/RobTillaart/DHTlib
#include <dht.h>
//bis hier DHT44*

// Display von hier
 // Works with the Adafruit 1.8" TFT Breakout w/SD card
 //   ----> http://www.adafruit.com/products/358
 
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library for ST7735
//#include <Adafruit_ST7789.h> // Hardware-specific library for ST7789
#include <SPI.h>
// Display bis hier

//Display PIN Aufteilung von hier
//https://lutz-baer.homepage.t-online.de/wordpress/?p=1090 
//  Check out the links above for our tutorials and wiring diagrams.
//  These displays use SPI to communicate, 4 or 5 pins are required to
//  interface (RST is optional
  // These pins will also work for the 1.8" TFT shield.
  #define TFT_CS        10
  #define TFT_RST        9 // falsch bezeichnet, die vebindung liegt am PIN 7 , Or set to -1 and connect to Arduino RESET pin
  #define TFT_DC         8 // A0
  #define TFT_MOSI 11  // Data out
  #define TFT_SCLK 13  // Clock out
  // For ST7735-based displays, we will use this call
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);

 // Display PIN Aufteilung bis hier


//PIN Aufteilung für MHZ19C* von
#include <SoftwareSerial.h>
const int pwmPin = 9; // PIN für die Datenauslesung
const int hdPin = 7; // weitere mögliche Kallibrierung [hier erstmal inaktiv]
unsigned int rangeFactor = 5000; //not every range works for every MH-Zxx!

SoftwareSerial myMHZ(10, 11); // RX, TX - serial comand für Kallibrierung [aktiv]
//PIN aufteilung für MHZ19C* bis

//PIN aufteilung für MQ131* in void setup

//PIN aufteilung für DHT44* von
dht DHT;

#define DHT44_PIN     5
//PIN aufteilung für DHT44* bis

void setup(){

  
//void setup für MHZ19C* von
  pinMode(hdPin, OUTPUT);
  digitalWrite(hdPin, HIGH);
  pinMode(pwmPin, INPUT);
  Serial.begin(9600);
  
//Display void setup initialisierung von
//initializer if using a 1.8" TFT screen with offset such as WaveShare:
   tft.initR(INITR_GREENTAB);      // Init ST7735S chip, green tab
//Display initialisierung bis

//Display Anzeige von hier
  Serial.println(F("Initialized"));

  uint16_t time = millis();
  tft.fillScreen(ST77XX_BLACK);
  time = millis() - time;

  Serial.println(time, DEC);
  delay(500);
    // tft print function!
  tftPrintTest();
  delay(4000);
// Display void setup Anzeige bis hier
  
  myMHZ.begin(9600);
  while(!Serial){}
  while(!myMHZ){}
    
  setRange(RANGE_2000); 
  Serial.print("Range: ");
  Serial.println(getRange()); // does not work with all MH-Zxx sensors
  Serial.print("Firmware: ");
  Serial.println(getFirmwareVersion()); // does not work with all MH-Zxx sensors

  
  // for calibration your MH-Zxx needs to run in a 400 ppm CO2 environment for 20 min!!!
  // if the MH-Z module supports it, you can calibrate via serial commands
  // if not, choose the HD - method)
    calibrateMHZ(); // calibration via serial command
 // calibrateMHZByHD(); // calibration via HD pin
  // activate/deacvtivate the permanent calibration which is happening in the background (if supported):
   activateCalibrationMode(true);

  Serial.print("Self Calibration Mode: ");
  if(getSelfCalModeStatus()){ // does not work with all MH-Zxx sensors
    Serial.println("ON"); 
  }
  else Serial.println("OFF");
//void setup für MHZ19C* bis

//void setup für MQ131* von
    Serial.begin(115200);
    
  //PIN aufteilung für MQ131* von
  // Init the sensor
  // - Heater control on pin 2
  // - Sensor analog read on pin A0
  // - Model LOW_CONCENTRATION
  // - Load resistance RL of 1MOhms (1000000 Ohms)
  MQ131.begin(2,A0, LOW_CONCENTRATION, 1000000);  
  //PIN aufteilung für MQ131* bis

  Serial.println("Calibration in progress...");
  
  MQ131.calibrate();
  
  Serial.println("Calibration done!");
  Serial.print("R0 = ");
  Serial.print(MQ131.getR0());
  Serial.println(" Ohms");
  Serial.print("Time to heat = ");
  Serial.print(MQ131.getTimeToRead());
  Serial.println(" s");
//void setup für MQ131* bis
   
//void setup für DHT44* von
 Serial.begin(115200);
    Serial.println("DHT TEST PROGRAM ");
    Serial.print("LIBRARY VERSION: ");
    Serial.println(DHT_LIB_VERSION);
    Serial.println();
    Serial.println("Type,\tstatus,\tHumidity (%),\tTemperature (C)\tTime (us)");
//void setup für DHT44* bis



}

void loop(){

// Display von hier 
  tft.invertDisplay(true);
  delay(500);
  tft.invertDisplay(false);
  delay(500);
//  tftPrintTest();
// Display bis hier 

  
//void loop für MHZ19C* von
  unsigned int ppmCO2PWM = 0;
  unsigned int ppmCO2Serial = 0;
  float ppmCO2Analog = 0.0;
  int temperature = 0;
   
  ppmCO2PWM = getCO2PWM();
  getCO2AndTemp(ppmCO2Serial, temperature);
  ppmCO2Analog = (((analogRead(A0))/1023.0 * 5.0) - 0.4)/1.6 * rangeFactor;
   
  Serial.print("CO2 in ppm (PWM): ");
  tft.print("CO2 in ppm (PWM): ");//Display
  Serial.println(ppmCO2PWM);
  tft.println(ppmCO2PWM);//Display
//  Serial.print("CO2 in ppm (Serial): ");
//  Serial.println(ppmCO2Serial);
//  Serial.print("CO2 in ppm (Analog): ");
//  Serial.println(ppmCO2Analog);
//  Serial.print("Temperature [°C]: ");
//  Serial.println(temperature);
  
  Serial.println("*********************");
  tft.println("*********************");
  delay(1000);
//void loop für MHZ19C* bis

//void loop für MQ131* von
Serial.println("Sampling...");
  MQ131.sample();
  Serial.print("Concentration O3 : ");
  tft.print("Concentration O3 : ");
  Serial.print(MQ131.getO3(PPM));
  tft.print(MQ131.getO3(PPM));
  Serial.println(" ppm");
  tft.println(" ppm");
  Serial.print("Concentration O3 : ");
  tft.print("Concentration O3 : ");
  Serial.print(MQ131.getO3(PPB));
  tft.print(MQ131.getO3(PPB));
  Serial.println(" ppb");
  tft.println(" ppb");
  Serial.print("Concentration O3 : ");
  tft.print("Concentration O3 : ");
  Serial.print(MQ131.getO3(MG_M3));
  tft.print(MQ131.getO3(MG_M3));
  Serial.println(" mg/m3");
  tft.println(" mg/m3");
  Serial.print("Concentration O3 : ");
  tft.print("Concentration O3 : ");
  Serial.print(MQ131.getO3(UG_M3));
  tft.print(MQ131.getO3(UG_M3));
  Serial.println(" ug/m3");
  tft.println(" ug/m3");
  Serial.println("*********************");
  tft.println("*********************");
  delay(60000);
//void loop für MQ131* bis

//void loop für DHT44* von
 // READ DATA
    Serial.print("DHT44, \t");
    tft.print("DHT44, \t");
    
    uint32_t start = micros();
    int chk = DHT.read44(DHT44_PIN);
    uint32_t stop = micros();

    switch (chk)
    {
    case DHTLIB_OK:
        Serial.print("OK,\t");
        tft.print("OK,\t");
        break;
    case DHTLIB_ERROR_CHECKSUM:
        Serial.print("Checksum error,\t");
        tft.print("Checksum error,\t");
        break;
    case DHTLIB_ERROR_TIMEOUT:
        Serial.print("Time out error,\t");
        tft.print("Time out error,\t");
        break;
    case DHTLIB_ERROR_CONNECT:
        Serial.print("Connect error,\t");
        tft.print("Connect error,\t");
        break;
    case DHTLIB_ERROR_ACK_L:
        Serial.print("Ack Low error,\t");
        tft.print("Ack Low error,\t");
        break;
    case DHTLIB_ERROR_ACK_H:
        Serial.print("Ack High error,\t");
        tft.print("Ack High error,\t");
        break;
    default:
        Serial.print("Unknown error,\t");
        tft.print("Unknown error,\t");
        break;
    }
    // DISPLAY DATA
    Serial.print(DHT.humidity, 1);
    tft.print(DHT.humidity, 1);
    Serial.print(",(%)\t");
    tft.print(",(%)\t");
    Serial.print(DHT.temperature, 1);
    tft.print(DHT.temperature, 1);
    Serial.print(",(°C)\t");
    tft.print(",(°C)\t");
    Serial.print(stop - start);
    tft.print(stop - start);
    Serial.println(",us");
    tft.println(",us");

    // FOR UNO + DHT44 500ms SEEMS TO BE MINIMUM DELAY BETWEEN SENSOR READS,
    // ADJUST TO YOUR NEEDS
  Serial.println("*********************");
  tft.println("*********************");
    delay(1000);
//void loop für DHT44* bis

}

// Display Ausgabe init von hier 
void tftPrintTest() {
 // tft.setTextWrap(false);
  tft.fillScreen(ST77XX_BLACK);
  tft.setCursor(0, 0);
  tft.setTextColor(ST77XX_WHITE);
//  tft.setTextColor(ST77XX_RED);
  tft.setTextSize(0);
  tft.println("Luftqualitaet");
//  tft.setTextColor(ST77XX_YELLOW);
//  tft.setTextSize(2);
//  tft.println("Hello World!");
//  tft.setTextColor(ST77XX_GREEN);
//  tft.setTextSize(3);
//  tft.println("Hello World!");
//  tft.setTextColor(ST77XX_BLUE);
//  tft.setTextSize(4);
//  tft.print(1234.567);
  delay(1500);
//  tft.setCursor(0, 0);
//  tft.fillScreen(ST77XX_BLACK);
//  tft.setTextColor(ST77XX_WHITE);
//  tft.setTextSize(0);
//  tft.println("Hello World!");
//  tft.setTextSize(1);
//  tft.setTextColor(ST77XX_GREEN);
//  tft.print(p, 6);
//  tft.println(" Want pi?");
//  tft.println(" ");
//  tft.print(8675309, HEX); // print 8,675,309 out in HEX!
//  tft.println(" Print HEX!");
//  tft.println(" ");
//  tft.setTextColor(ST77XX_WHITE);
//  tft.println("Sketch has been");
//  tft.println("running for: ");
//  tft.setTextColor(ST77XX_MAGENTA);
//  tft.print(millis() / 1000);
//  tft.setTextColor(ST77XX_WHITE);
//  tft.print(" seconds.");
}
// Display Ausgabe init bis hier

//Befehle ohne Bibliothek Nutzung für MHZ19C* von 

void setRange(unsigned int range){
  rangeFactor = range;
  sendCommand(0x99, range);
  delay(100);
}

void calibrateMHZ(){
  sendCommand(0x87, 0x00);
}

void calibrateMHZByHD(){
  Serial.println("Calibration - please wait for initialization");
  digitalWrite(hdPin, LOW);
  delay(10000);
  digitalWrite(hdPin, HIGH);
  Serial.println("Done");
}

void activateCalibrationMode(bool activate){
  if(activate){
    sendCommand(0x7A, 0x00); // my own command for activation
  }
  else{
    sendCommand(0x79, 0x00); 
  }
  delay(100);
}

unsigned int getRange(){
  byte message[9]; 
  getResponse(message, 0x9B);
  unsigned int range = (unsigned int)(message[4]<<8) + message[5];
  return range; 
}

void getCO2AndTemp(unsigned int &ppmCO2, int &temp){
  byte message[9];
  getResponse(message, 0x86);
  ppmCO2 = (unsigned int)(message[2]<<8) + message[3];
  temp = (int)(message[4] - TEMP_CORR);
}

String getFirmwareVersion(){
  byte message[9];
  String firmware = "";
  getResponse(message,0xA0);
  for(int i=2; i<6; i++){
    firmware += (char)message[i];
  }
  return firmware;
}

byte getSelfCalModeStatus(){
  byte message[9]; 
  getResponse(message, 0x7D);
  return message[7]; 
}

void sendCommand(byte cmdByte, unsigned int range){
  byte cmd[9] = {0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  cmd[2] = cmdByte;
  if(cmdByte==0x99){
    cmd[6] = range>>8;
    cmd[7] = range & 0xFF;
  }
  
  if(cmdByte==0x7A){ // my own command for activation of self calibration
    cmd[2] = 0x79;
    cmd[3] = 0xA0;
  }  
  cmd[8] = getCheckSum(cmd);
  myMHZ.write(cmd,9);
}

unsigned int getCO2PWM(){
  unsigned long highPeriod = 0;
  unsigned long lowPeriod = 0;
  unsigned long startTime = 0;
  unsigned int ppmCO2 = 0;
  
  while(digitalRead(pwmPin)){}
  while(!digitalRead(pwmPin)){}
  startTime = millis();
  while(digitalRead(pwmPin)){}
  highPeriod = millis() - startTime;
  startTime = millis(); 
  while(!digitalRead(pwmPin)){}
  lowPeriod = millis() - startTime;
  
  ppmCO2 = rangeFactor*(highPeriod - 2)/(highPeriod + lowPeriod - 4); 

  return ppmCO2; 
}

void getResponse(byte msg[], byte cmdByte){
  unsigned long maxWaitTime = 1000;
  while(myMHZ.available()){
    myMHZ.read();    // removes "rubbish"
  }
  sendCommand(cmdByte, 0x00);
  unsigned long startTime = millis();
  
  while(!myMHZ.available()){
    if((startTime-millis())>maxWaitTime){ // if the MH-Zxx does not respond
      break;
    }
  }
  
  myMHZ.readBytes(msg,9);
}

byte getCheckSum(byte *seq){
  byte checkSum = 0;
  for(int i=1; i<8; i++){
    checkSum += seq[i];
  }
  checkSum = 255 - checkSum + 1;
  return checkSum;
}
//Befehle ohne Bibliothek Nutzung für MHZ19C* bis
